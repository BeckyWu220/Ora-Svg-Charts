{"version":3,"sources":["amplitude-range.tsx"],"names":["React","View","Text","StyleSheet","findNodeHandle","palette","AmplitudeRange","props","min","max","minAmplitude","maxAmplitude","color","gray_200","height","borderRadius","backgroundColor","gray_300","highlightedPercentage","Math","abs","offset","initialMarkPosition","x","y","width","valueMarkerPosition","setValueMarkerPosition","useState","highlightedBar","useRef","container","flex","style","current","measureLayout","flexGrow","overflow","position","top","bottom","left","styles","markerTextContainer","markerText","create","gray_400","fontWeight","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, findNodeHandle } from 'react-native';\nimport { palette } from './colors';\n\nexport interface AmplitudeRangeProps {\n  color?: string,\n  backgroundColor?: string,\n  min: number,\n  max: number,\n  minAmplitude: number,\n  maxAmplitude: number,\n  influence: number,\n  range: number,\n  height?: number,\n  borderRadius?: number,\n  style?: object\n}\n\nexport default function AmplitudeRange(props: AmplitudeRangeProps) {\n\n  const { \n    min = 0, \n    max = 100, \n    minAmplitude = 10, \n    maxAmplitude = 90, \n    color = palette.gray_200, \n    height = 16, \n    borderRadius = 8,\n    backgroundColor = palette.gray_300\n  } = props\n\n  const highlightedPercentage = `${Math.abs(maxAmplitude - minAmplitude) / Math.abs(max-min) * 100}%`\n  \n  const offset = `${Math.abs(minAmplitude - min) /Math.abs(max-min) * 100}%`\n\n  const initialMarkPosition = {\n    x: null,\n    y: null,\n    width: 0,\n    height: 0,\n  }\n\n  const [valueMarkerPosition, setValueMarkerPosition] = React.useState(initialMarkPosition)\n\n  const highlightedBar = React.useRef()\n  const container = React.useRef()\n\n  return (\n    <View\n      ref={container}\n      style={{ flex: 1, ...props.style }}\n      onLayout={() => {\n        highlightedBar.current.measureLayout(findNodeHandle(container.current), (x, y, width, height) => {\n          setValueMarkerPosition({ x, y, width, height })\n        })\n      }}\n    >\n      <View style={{ \n          flexGrow: 1, \n          height, \n          backgroundColor, \n          borderRadius, \n          overflow: 'hidden'\n        }}>\n        {/* Highlighted Bar */}\n        <View\n          ref={highlightedBar}\n          style={{\n            position: 'absolute', \n            top: 0, \n            bottom: 0, \n            backgroundColor: color,\n            left: offset, \n            width: highlightedPercentage\n          }}\n        />\n      </View>\n      <View style={[styles.markerTextContainer, { left: valueMarkerPosition.x - 10 }]}>\n        { valueMarkerPosition.x !== null && <Text style={styles.markerText}>{minAmplitude}</Text> }\n      </View>\n      <View style={[styles.markerTextContainer, { left: valueMarkerPosition.x - 10 + valueMarkerPosition.width }]}>\n        { valueMarkerPosition.x !== null && <Text style={styles.markerText}>{maxAmplitude}</Text> }\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  markerText: {\n    color: palette.gray_400,\n    fontWeight: 'bold'\n  },\n  markerTextContainer: {\n    position: 'absolute', \n    top: 14, \n    width: 20, \n    overflow: 'visible', \n    alignItems: 'center'\n  }\n})"]}
