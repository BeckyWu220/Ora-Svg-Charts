{"version":3,"sources":["bar-chart.tsx"],"names":["React","ReactNative","require","View","Image","Text","RNText","TouchableOpacity","TouchableWithoutFeedback","BarChart","SVGBarChart","Grid","YAxis","Rect","G","palette","props","data","style","strokeWidth","strokeLinecap","selectedBar","setSelectedBar","useState","key","value","useEffect","onSelect","barWidth","setBarWidth","positions","setPositions","barMargin","setBarMargin","colors","blue_150","purple_100","green_100","blue_600","gray_200","barChartData","map","chartData","index","svg","fill","color","onClick","onPress","total","reduce","a","b","Labels","args","x","y","bandwidth","barData","fontSize","xPositions","labels","push","black","gray_500","toFixed","undefined","length","x1","x2","margin","height","flexDirection","top","bottom","flexGrow","flex","item","left","right","stroke","gray_300","alignItems","justifyContent","width","position","borderRadius","overflow","alignSelf","maxWidth","maxHeight","opacity","uri","gray_600","textAlign","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Image, Text: RNText, TouchableOpacity, TouchableWithoutFeedback } = ReactNative;\nimport { BarChart as SVGBarChart, Grid, YAxis } from 'react-native-svg-charts';\nimport { Rect, G, Text } from 'react-native-svg';\nimport { palette } from './colors';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface BarChartProps {\n    data: Array<ChartData>,\n    style: object,\n    strokeWidth: number,\n    strokeLinecap: 'round' | 'square' | 'butt'\n    onSelect?(data?: ChartData): any,\n}\n\nexport default function BarChart(props: BarChartProps) {\n\n    const { data, style, strokeWidth = 5, strokeLinecap = 'round' } = props\n\n    const [selectedBar, setSelectedBar] = React.useState<ChartData>({\n        key: null,\n        value: null\n    })\n\n    React.useEffect(() => {\n        props.onSelect && props.onSelect(selectedBar)\n    }, [selectedBar])\n\n    const [barWidth, setBarWidth] = React.useState(0)\n    const [positions, setPositions] = React.useState([])\n    const [barMargin, setBarMargin] = React.useState(0)\n\n    const colors = [palette.blue_150, palette.purple_100, palette.green_100, palette.blue_600, palette.gray_200]\n    const barChartData = data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => setSelectedBar(chartData), // Make sure the svg is clickable in web app.\n                onPress: () => setSelectedBar(chartData)\n            },\n        }\n    })\n\n    const total = data.map(chartData => chartData.value).reduce((a, b) => a + b, 0)\n\n    const Labels = (args) => {\n        const { x, y, bandwidth, data } = args\n        const colors = data.map((barData) => barData.svg.fill)\n        const fontSize = 14\n    \n        let xPositions = []\n        const labels = data.map((barData, index) => {\n            const { value, key } = barData\n            xPositions.push(x(index))\n            return (\n                <G key={index}>\n                    <Text\n                        x={x(index) + (bandwidth / 2)}\n                        y={y(value)-fontSize}\n                        fontSize={fontSize}\n                        fontWeight={ selectedBar && selectedBar.key === key ? 'bold' : 'normal'}\n                        fill={  selectedBar && selectedBar.key === key ? palette.black : palette.gray_500}\n                        alignmentBaseline={'middle'}\n                        textAnchor={'middle'}\n                    >\n                        {(value / total * 100).toFixed(1) + '%'}\n                    </Text>\n                    { strokeLinecap !== 'butt' &&\n                        <Rect\n                            x={x(index)}\n                            y={y(value) - strokeWidth }\n                            rx={ strokeLinecap === 'round' ? strokeWidth : undefined}\n                            ry={ strokeLinecap === 'round' ? strokeWidth : undefined}\n                            width={bandwidth}\n                            height={2*strokeWidth}\n                            fill={colors[index]}\n                        />\n                    }\n                </G>\n            )\n        })\n\n        if (barWidth === 0) {\n            setBarWidth(bandwidth)\n            setPositions(xPositions)\n            if (xPositions.length > 2) {\n                let x1 = xPositions[1]\n                let x2 = xPositions[2]\n                const margin = (x2 - x1 - bandwidth) / 2\n                setBarMargin(margin)\n            }\n        }\n        \n        return labels\n    }\n\n    return (\n        <TouchableWithoutFeedback onPress={() => setSelectedBar(null) }>\n        <View style={{ height: 250, flexDirection: 'row', ...style }}>\n            <YAxis\n                data={barChartData.map((chartData) => chartData.value)}\n                contentInset={{ top: 25, bottom: 70 }}\n                svg={{\n                    fill: palette.gray_500,\n                    fontSize: 12,\n                }}\n                numberOfTicks={4}\n                min={0}\n                formatLabel={(value) => `${(value / total * 100).toFixed(0)}%`}\n            />\n            <View style={{ flexGrow: 1 }}>\n                <SVGBarChart\n                    style={{ flex: 1 }}\n                    data={barChartData}\n                    gridMin={0}\n                    yAccessor={({ item }) => item.value}\n                    contentInset={{ top: 25, bottom: 10, left: 40, right: 40 }}\n                    spacingInner={0.5}\n                >\n                    <Grid svg={{ stroke: palette.gray_300 }} />\n                    <Labels />\n                </SVGBarChart>\n                {   barWidth > 0 &&\n                    <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'center', height: 60 }}>\n                        { barChartData.map((chartData, index) => {\n                            return (\n                                <View key={index} style={{ width: barWidth + 2 * barMargin, height: '100%', position: 'absolute', left: positions[index] - barMargin }}>\n                                    <TouchableOpacity\n                                        onPress={() => {\n                                            setSelectedBar(chartData)\n                                        }}\n                                        style={{ width: barWidth, height: barWidth, borderRadius: barWidth/2, overflow: 'hidden', alignSelf: 'center', maxWidth: 40, maxHeight: 40 }}\n                                    >\n                                        <Image\n                                            style={{width: '100%', height: '100%', opacity: selectedBar && selectedBar.key === chartData.key ? 1 : 0.5}}\n                                            resizeMode={\"cover\"}\n                                            source={{uri: 'https://reactnative.dev/img/tiny_logo.png'}}\n                                        />\n                                    </TouchableOpacity>\n                                    <View style={{ flexGrow: 1 }}>\n                                        <RNText\n                                            numberOfLines={2}\n                                            style={{ color: selectedBar && selectedBar.key === chartData.key ? palette.gray_600 : palette.gray_500, textAlign: 'center', fontWeight: 'bold' }}\n                                        >\n                                            {barChartData.map((chartData) => chartData.key)[index]}\n                                        </RNText>\n                                    </View>\n                                </View>\n                            )\n                        }) }\n                        \n                    </View>\n                }\n            </View>\n        </View>\n        </TouchableWithoutFeedback>\n    )\n}"]}