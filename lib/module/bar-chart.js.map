{"version":3,"sources":["bar-chart.tsx"],"names":["React","ReactNative","require","View","Image","Text","RNText","TouchableOpacity","TouchableWithoutFeedback","BarChart","SVGBarChart","Grid","YAxis","Rect","G","palette","getRandomColor","blendWithWhite","props","colors","setColors","useState","data","style","strokeWidth","strokeLinecap","selectedIndex","selectedBarIndex","setSelectedBarIndex","onSelectBar","barIndex","onSelect","useEffect","barWidth","setBarWidth","positions","setPositions","barMargin","setBarMargin","preferredColors","blue_700","purple_100","green_100","blue_600","gray_200","green_200","purple_200","gray_700","numberOfColorsToGenerate","length","generatedColors","i","randomColor","includes","push","concat","barChartData","map","chartData","index","key","value","svg","fill","color","onClick","onPress","imageUri","Labels","args","x","y","bandwidth","barData","fontSize","xPositions","labels","black","gray_500","toFixed","undefined","x1","x2","margin","height","flexDirection","top","bottom","fontFamily","flexGrow","flex","item","left","right","stroke","gray_300","alignItems","justifyContent","width","position","borderRadius","overflow","alignSelf","maxWidth","maxHeight","opacity","gray_600","textAlign","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Image, Text: RNText, TouchableOpacity, TouchableWithoutFeedback } = ReactNative;\nimport { BarChart as SVGBarChart, Grid, YAxis } from 'react-native-svg-charts';\nimport { Rect, G, Text } from 'react-native-svg';\nimport { palette, getRandomColor, blendWithWhite } from './colors';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string,\n    imageUri?: string,\n}\n\nexport interface BarChartProps {\n    data: Array<ChartData>,\n    style: object,\n    strokeWidth: number,\n    strokeLinecap: 'round' | 'square' | 'butt'\n    onSelect?(index: number): any,\n    selectedIndex: number,\n}\n\nexport default function BarChart(props: BarChartProps) {\n\n    const [ colors, setColors ] = React.useState([])\n\n    const { data, style, strokeWidth = 5, strokeLinecap = 'round', selectedIndex = 0 } = props\n\n    const [selectedBarIndex, setSelectedBarIndex] = React.useState<number>(selectedIndex)\n\n    const onSelectBar = (barIndex) => {\n        setSelectedBarIndex(barIndex)\n        props.onSelect && props.onSelect(barIndex)\n    }\n\n    React.useEffect(() => {\n        setSelectedBarIndex(selectedIndex)\n    }, [selectedIndex])\n\n    const [barWidth, setBarWidth] = React.useState(0)\n    const [positions, setPositions] = React.useState([])\n    const [barMargin, setBarMargin] = React.useState(0)\n\n    const preferredColors = [palette.blue_700, palette.purple_100, palette.green_100, palette.blue_600, palette.gray_200, palette.green_200, palette.purple_200, palette.gray_700]\n    React.useEffect(() => {\n        const numberOfColorsToGenerate = data.length - preferredColors.length\n        const generatedColors = []\n        for (var i = 0; i < numberOfColorsToGenerate; i++) { \n            let randomColor = null\n            do {\n                randomColor = getRandomColor()\n            } while (preferredColors.includes(randomColor) || generatedColors.includes(randomColor))\n            generatedColors.push(randomColor)\n        }\n        setColors(preferredColors.concat(generatedColors))\n    }, [])\n    \n    const barChartData = data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: selectedBarIndex !== null && selectedBarIndex === index ? chartData.color || colors[index] : blendWithWhite(chartData.color || colors[index]),\n                onClick: () => onSelectBar(index), // Make sure the svg is clickable in web app.\n                onPress: () => onSelectBar(index)\n            },\n            imageUri: chartData.imageUri\n        }\n    })\n\n    const Labels = (args) => {\n        const { x, y, bandwidth, data } = args\n        const colors = data.map((barData) => barData.svg.fill)\n        const fontSize = 12\n    \n        let xPositions = []\n        const labels = data.map((barData, index) => {\n            const { value, key } = barData\n            xPositions.push(x(index))\n            return (\n                <G key={index}>\n                    <Text\n                        x={x(index) + (bandwidth / 2)}\n                        y={y(value)-fontSize}\n                        fontSize={fontSize}\n                        fontWeight={ selectedBarIndex !== null && selectedBarIndex === index ? 'bold' : 'normal'}\n                        fontFamily={\"SourceSansPro-Regular\"}\n                        fill={  selectedBarIndex !== null && selectedBarIndex === index ? palette.black : palette.gray_500}\n                        alignmentBaseline={'middle'}\n                        textAnchor={'middle'}\n                    >\n                        {value.toFixed(1) + '%'}\n                    </Text>\n                    { strokeLinecap !== 'butt' &&\n                        <Rect\n                            x={x(index)}\n                            y={y(value) - strokeWidth }\n                            rx={ strokeLinecap === 'round' ? strokeWidth : undefined}\n                            ry={ strokeLinecap === 'round' ? strokeWidth : undefined}\n                            width={bandwidth}\n                            height={2*strokeWidth}\n                            fill={colors[index]}\n                        />\n                    }\n                </G>\n            )\n        })\n\n        if (barWidth === 0) {\n            setBarWidth(bandwidth)\n            setPositions(xPositions)\n            if (xPositions.length > 2) {\n                let x1 = xPositions[1]\n                let x2 = xPositions[2]\n                const margin = (x2 - x1 - bandwidth) / 2\n                setBarMargin(margin)\n            }\n        }\n        \n        return labels\n    }\n\n    return (\n        <View style={{ height: 250, flexDirection: 'row', ...style }}>\n            <YAxis\n                data={barChartData.map((chartData) => chartData.value)}\n                contentInset={{ top: 25, bottom: 70 }}\n                svg={{\n                    fill: palette.gray_500,\n                    fontSize: 12,\n                    fontFamily: \"SourceSansPro-Regular\"\n                }}\n                numberOfTicks={4}\n                min={0}\n                formatLabel={(value) => `${value.toFixed(0)}%`}\n            />\n            <View style={{ flexGrow: 1 }}>\n                <SVGBarChart\n                    style={{ flex: 1 }}\n                    data={barChartData}\n                    gridMin={0}\n                    yAccessor={({ item }) => item.value}\n                    contentInset={{ top: 25, bottom: 10, left: 40, right: 40 }}\n                    spacingInner={0.5}\n                >\n                    <Grid svg={{ stroke: palette.gray_300 }} />\n                    <Labels />\n                </SVGBarChart>\n                {   barWidth > 0 &&\n                    <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'center', height: 60 }}>\n                        { barChartData.map((chartData, index) => {\n                            return (\n                                <View key={index} style={{ width: barWidth + 2 * barMargin, height: '100%', position: 'absolute', left: positions[index] - barMargin }}>\n                                    {   chartData.imageUri &&\n                                        <TouchableOpacity\n                                            onPress={() => onSelectBar(index)}\n                                            style={{ width: barWidth, height: barWidth, borderRadius: barWidth/2, overflow: 'hidden', alignSelf: 'center', maxWidth: 40, maxHeight: 40 }}\n                                        >\n                                            <Image\n                                                style={{width: '100%', height: '100%', opacity: selectedBarIndex !== null && selectedBarIndex === index ? 1 : 0.5}}\n                                                resizeMode={\"cover\"}\n                                                source={chartData.imageUri}\n                                            />\n                                        </TouchableOpacity>\n                                    }\n                                    <View style={{ flexGrow: 1 }}>\n                                        <RNText\n                                            numberOfLines={2}\n                                            style={{ color: selectedBarIndex !== null && selectedBarIndex === index ? palette.gray_600 : palette.gray_500, textAlign: 'center', fontWeight: 'bold', fontFamily: \"SourceSansPro-Regular\" }}\n                                        >\n                                            {barChartData.map((chartData) => chartData.key)[index]}\n                                        </RNText>\n                                    </View>\n                                </View>\n                            )\n                        }) }\n                        \n                    </View>\n                }\n            </View>\n        </View>\n    )\n}"]}