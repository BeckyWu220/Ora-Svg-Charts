{"version":3,"sources":["bar-chart.tsx"],"names":["React","ReactNative","require","View","Image","Text","RNText","TouchableOpacity","BarChart","SVGBarChart","Grid","YAxis","Rect","G","props","selectedBar","setSelectedBar","useState","label","value","barWidth","setBarWidth","positions","setPositions","barMargin","setBarMargin","colors","barChartData","data","map","chartData","index","key","svg","fill","color","onClick","onPress","total","reduce","a","b","Labels","args","x","y","bandwidth","barData","capHeight","fontSize","xPositions","labels","push","toFixed","length","x1","x2","margin","height","flexDirection","top","bottom","flexGrow","flex","item","left","right","stroke","alignItems","justifyContent","width","position","borderRadius","overflow","alignSelf","maxWidth","maxHeight","opacity","uri","textAlign","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Image, Text: RNText, TouchableOpacity } = ReactNative;\nimport { BarChart as SVGBarChart, Grid, XAxis, YAxis } from 'react-native-svg-charts';\nimport { Rect, G, Text } from 'react-native-svg';\nimport * as scale from 'd3-scale';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface BarChartProps {\n    data: Array<ChartData>\n}\n\nexport default function BarChart(props: BarChartProps) {\n\n    const [selectedBar, setSelectedBar] = React.useState({\n        label: '',\n        value: 0\n    })\n\n    const [barWidth, setBarWidth] = React.useState(0)\n    const [positions, setPositions] = React.useState([])\n    const [barMargin, setBarMargin] = React.useState(0)\n\n    const colors = ['#9EA8B7', '#7D6A80', '#74988C', '#3E5567', '#63819B']\n    const barChartData = props.data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => setSelectedBar({\n                    label: chartData.key,\n                    value: chartData.value\n                }),\n                onPress: () => setSelectedBar({\n                    label: chartData.key,\n                    value: chartData.value\n                })\n            },\n        }\n    })\n\n    const total = props.data.map(chartData => chartData.value).reduce((a, b) => a + b, 0)\n\n    const Labels = (args) => {\n        const { x, y, bandwidth, data } = args\n        const colors = data.map((barData) => barData.svg.fill)\n        const capHeight = 10\n        const fontSize = 14\n    \n        let xPositions = []\n        const labels = data.map((barData, index) => {\n            const { value, key } = barData\n            xPositions.push(x(index))\n            return (\n                <G key={index}>\n                    <Text\n                        x={x(index) + (bandwidth / 2)}\n                        y={y(value)-fontSize}\n                        fontSize={fontSize}\n                        fontWeight={ selectedBar.label === key ? 'bold' : 'normal'}\n                        fill={ selectedBar.label === key ? 'black' : 'gray'}\n                        alignmentBaseline={'middle'}\n                        textAnchor={'middle'}\n                    >\n                        {(value / total * 100).toFixed(1) + '%'}\n                    </Text>\n                    <Rect\n                        x={x(index)}\n                        y={y(value) - capHeight / 2 } // Subtract Height / 2 to make half of the Rect above the bar\n                        rx={capHeight / 2} // Set to Height / 2\n                        ry={capHeight / 2} // Set to Height / 2\n                        width={bandwidth}\n                        height={10} // Height of the Rect\n                        fill={colors[index]}\n                    />\n                </G>\n            )\n        })\n\n        if (barWidth === 0) {\n            setBarWidth(bandwidth)\n            setPositions(xPositions)\n            if (xPositions.length > 2) {\n                let x1 = xPositions[1]\n                let x2 = xPositions[2]\n                const margin = (x2 - x1 - bandwidth) / 2\n                setBarMargin(margin)\n            }\n        }\n        \n        return labels\n    }\n\n    return (\n        <View style={{ height: 250, flexDirection: 'row' }}>\n            <YAxis\n                data={barChartData.map((chartData) => chartData.value)}\n                contentInset={{ top: 25, bottom: 70 }}\n                svg={{\n                    fill: 'grey',\n                    fontSize: 12,\n                }}\n                numberOfTicks={4}\n                min={0}\n                formatLabel={(value) => `${(value / total * 100).toFixed(0)}%`}\n            />\n            <View style={{ flexGrow: 1 }}>\n                <SVGBarChart\n                    style={{ flex: 1 }}\n                    data={barChartData}\n                    gridMin={0}\n                    yAccessor={({ item }) => item.value}\n                    contentInset={{ top: 25, bottom: 10, left: 40, right: 40 }}\n                    spacingInner={0.5}\n                >\n                    <Grid svg={{ stroke: '#e3e3e3' }} />\n                    <Labels />\n                </SVGBarChart>\n                {   barWidth > 0 &&\n                    <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'center', height: 60 }}>\n                        { barChartData.map((chartData, index) => {\n                            return (\n                                <View key={index} style={{ width: barWidth + 2 * barMargin, height: '100%', position: 'absolute', left: positions[index] - barMargin }}>\n                                    <TouchableOpacity\n                                        onPress={() => {\n                                            setSelectedBar({\n                                                label: chartData.key,\n                                                value: chartData.value\n                                            })\n                                        }}\n                                        style={{ width: barWidth, height: barWidth, borderRadius: barWidth/2, overflow: 'hidden', alignSelf: 'center', maxWidth: 40, maxHeight: 40 }}\n                                    >\n                                        <Image\n                                            style={{width: '100%', height: '100%', opacity: selectedBar.label === chartData.key ? 1 : 0.5}}\n                                            resizeMode={\"cover\"}\n                                            source={{uri: 'https://reactnative.dev/img/tiny_logo.png'}}\n                                        />\n                                    </TouchableOpacity>\n                                    <View style={{ flexGrow: 1 }}>\n                                        <RNText\n                                            numberOfLines={2}\n                                            style={{ textAlign: 'center', fontWeight: selectedBar.label === chartData.key ? 'bold' : 'normal' }}\n                                        >\n                                            {barChartData.map((chartData) => chartData.key)[index]}\n                                        </RNText>\n                                    </View>\n                                </View>\n                            )\n                        }) }\n                        \n                    </View>\n                }\n            </View>\n        </View>\n    )\n}"]}