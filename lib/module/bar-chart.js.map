{"version":3,"sources":["bar-chart.tsx"],"names":["React","ReactNative","require","View","BarChart","SVGBarChart","Rect","G","Text","props","selectedBar","setSelectedBar","useState","label","value","colors","barChartData","data","map","charData","index","key","svg","fill","color","onClick","onPress","total","chartData","reduce","a","b","Labels","args","x","y","bandwidth","barData","capHeight","fontSize","undefined","toFixed","height","item","top","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View } = ReactNative;\nimport { BarChart as SVGBarChart } from 'react-native-svg-charts';\nimport { Rect, G, Text } from 'react-native-svg';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface BarChartProps {\n    data: Array<ChartData>\n}\n\nexport default function BarChart(props: BarChartProps) {\n\n    const [selectedBar, setSelectedBar] = React.useState({\n        label: '',\n        value: 0\n    })\n\n    const colors = ['#9EA8B7', '#7D6A80', '#74988C', '#3E5567', '#63819B']\n    const barChartData = props.data.map((charData, index) => {\n        return {\n            key: charData.key,\n            value: charData.value,\n            svg: {\n                fill: charData.color || colors[index],\n                onClick: () => setSelectedBar({\n                    label: charData.key,\n                    value: charData.value\n                }),\n                onPress: () => setSelectedBar({\n                    label: charData.key,\n                    value: charData.value\n                })\n            },\n        }\n    })\n\n    const total = props.data.map(chartData => chartData.value).reduce((a, b) => a + b, 0)\n\n    const Labels = (args) => {\n        const { x, y, bandwidth, data } = args\n        const colors = data.map((barData) => barData.svg.fill)\n        const capHeight = 10\n        const fontSize = 16\n        return (\n            data.map((barData, index) => {\n                const { value, key } = barData\n                return (\n                    <G key={index}>\n                        <Text\n                            x={x(index) + (bandwidth / 2)}\n                            y={y(value)-fontSize}\n                            fontSize={fontSize}\n                            fontWeight={ selectedBar.label === key ? 'bold' : undefined}\n                            fill={'black'}\n                            alignmentBaseline={'middle'}\n                            textAnchor={'middle'}\n                        >\n                            {(value / total * 100).toFixed(2) + '%'}\n                        </Text>\n                        <Rect\n                            x={x(index)}\n                            y={y(value) - capHeight / 2 } // Subtract Height / 2 to make half of the Rect above the bar\n                            rx={capHeight / 2} // Set to Height / 2\n                            ry={capHeight / 2} // Set to Height / 2\n                            width={bandwidth}\n                            height={10} // Height of the Rect\n                            fill={colors[index]}\n                        />\n                    </G>\n                )\n            })\n        )\n    }\n\n    return (\n        <View>\n            <SVGBarChart\n                style={{ height: 200 }}\n                data={barChartData}\n                gridMin={0}\n                yAccessor={({ item }) => item.value}\n                contentInset={{ top: 25, bottom: 20 }}\n                spacingInner={0.6}\n                spacingOuter={0.8}\n            >\n                <Labels />\n            </SVGBarChart>\n        </View>\n    )\n}"]}