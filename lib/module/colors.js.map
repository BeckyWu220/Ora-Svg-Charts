{"version":3,"sources":["colors.ts"],"names":["palette","black","white","blue_100","blue_200","blue_300","blue_400","blue_500","blue_600","blue_700","gray_100","gray_200","gray_300","gray_400","gray_500","gray_600","gray_700","purple_100","purple_200","green_100","green_200","getRandomColor","availableColors","Object","values","firstColorIndex","Math","floor","random","length","secondColorIndex","firstColorHex","replace","secondColorHex","firstColorPartials","match","secondColorPartials","blendColorPartials","map","p","index","firstPartial","parseInt","secondPartial","avgPartial","toString","join","blendWithWhite","color"],"mappings":"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","sourcesContent":["export const palette = {\n  /** Basic */\n  black: \"#1D1D1D\",\n  white: \"#FFFFFF\",\n  \n  /** Blueish */\n  blue_100: '#C3C9CE',\n  blue_200: '#86939E', \n  blue_300: '#74828F',\n  blue_400: '#687480', \n  blue_500: '#4D6071',\n  blue_600: '#3E5567',\n  blue_700: '#9EA8B7',\n\n  /** Grayish */\n  gray_100: '#F1F1F1',\n  gray_200: '#63819B',\n  gray_300: '#E3E3E3',\n  gray_400: '#4A4A4A',\n  gray_500: '#A9A9A9',\n  gray_600: '#5F5F5F',\n  gray_700: '#4B5156',\n\n  /** Purple */\n  purple_100: '#7D6A80',\n  purple_200: '#8A7E89',\n\n  /** Green */\n  green_100: '#74988C',\n  green_200: '#778F83',\n\n}\n\nexport const getRandomColor = () => {\n  const availableColors = Object.values(palette)\n  const firstColorIndex = Math.floor((Math.random() * availableColors.length))\n  let secondColorIndex = null\n  do {\n    secondColorIndex = Math.floor((Math.random() * availableColors.length))\n  } while (secondColorIndex === firstColorIndex)\n  \n  const firstColorHex = availableColors[firstColorIndex].replace('#', '')\n  const secondColorHex = availableColors[secondColorIndex].replace('#', '')\n\n  const firstColorPartials = firstColorHex.match(/.{2}/g); \n  const secondColorPartials = secondColorHex.match(/.{2}/g); \n  const blendColorPartials = firstColorPartials.map((p, index) => {\n\n    const firstPartial = parseInt(`0x${p}`)\n    const secondPartial = parseInt(`0x${secondColorPartials[index]}`)\n\n    const avgPartial = Math.floor((firstPartial + secondPartial) / 2)\n    return avgPartial.toString(16)\n  }).join('')\n  return `#${blendColorPartials}`\n}\n\nexport const blendWithWhite = (color) => {\n  const firstColorHex = color.replace('#', '')\n  const secondColorHex = 'FFFFFF'\n\n  const firstColorPartials = firstColorHex.match(/.{2}/g); \n  const secondColorPartials = secondColorHex.match(/.{2}/g); \n  const blendColorPartials = firstColorPartials.map((p, index) => {\n\n    const firstPartial = parseInt(`0x${p}`)\n    const secondPartial = parseInt(`0x${secondColorPartials[index]}`)\n\n    const avgPartial = Math.floor(((firstPartial + secondPartial) / 2 + firstPartial) / 2)\n    return avgPartial.toString(16)\n  }).join('')\n  return `#${blendColorPartials}`\n}\n\n"]}