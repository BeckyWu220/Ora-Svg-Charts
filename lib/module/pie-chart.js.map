{"version":3,"sources":["pie-chart.tsx"],"names":["React","ReactNative","require","View","Text","RNText","StyleSheet","TouchableWithoutFeedback","PieChart","SVGPieChart","palette","props","data","style","selectedSliceIndex","setSelectedSliceIndex","useState","useEffect","onSelect","colors","blue_150","purple_100","green_100","blue_600","gray_200","pieChartData","map","chartData","index","key","value","svg","fill","color","onClick","arc","outerRadius","padAngle","onPress","chartWidth","setChartWidth","Labels","slices","slice","pieCentroid","white","toFixed","chartRef","useRef","innerRadiusRatio","justifyContent","height","flex","item","styles","textContainer","left","width","current","measure","x","y","text","create","position","padding","textAlign","fontSize","fontWeight","gray_600"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Text: RNText, StyleSheet, TouchableWithoutFeedback } = ReactNative;\n// import { View, Dimensions, Text as RNText, StyleSheet } from 'react-native';\nimport { PieChart as SVGPieChart } from 'react-native-svg-charts';\nimport { Text } from 'react-native-svg';\nimport { palette } from './colors';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface PieChartProps {\n    data: Array<ChartData>,\n    onSelect?(data?: ChartData): any,\n    style: object,\n}\n\nexport default function PieChart(props: PieChartProps) {\n\n    const { data, style } = props\n\n    const [selectedSliceIndex, setSelectedSliceIndex] = React.useState(null)\n\n    React.useEffect(() => {\n        props.onSelect && props.onSelect(selectedSliceIndex)\n    }, [selectedSliceIndex])\n\n    const colors = [palette.blue_150, palette.purple_100, palette.green_100, palette.blue_600, palette.gray_200]\n    const pieChartData = data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => {\n                    setSelectedSliceIndex(index)\n                }\n            },\n            arc: {\n                outerRadius: selectedSliceIndex === index ? '100%' : '80%',\n                padAngle: 0,\n            },\n            onPress: () => {\n                setSelectedSliceIndex(index)\n            }\n        }\n    })\n\n    const [chartWidth, setChartWidth] = React.useState(0)\n\n    const Labels = ({ slices }) => {\n        return slices.map((slice, index) => {\n            const { pieCentroid, data } = slice;\n            return (\n                <Text\n                    key={index}\n                    x={pieCentroid[0]}\n                    y={pieCentroid[1]}\n                    fill={palette.white}\n                    fontWeight={ selectedSliceIndex === index ? \"bold\" : \"normal\"}\n                    textAnchor={'middle'}\n                    alignmentBaseline={'middle'}\n                    fontSize={14}\n                >\n                    {data.value.toFixed(1) + '%'}\n                </Text>\n            )\n        })\n    }\n\n    const chartRef = React.useRef()\n\n    const innerRadiusRatio = 0.35\n\n    return (\n        <TouchableWithoutFeedback onPress={() => {\n            setSelectedSliceIndex(null)\n        }}>\n            <View ref={chartRef} style={{ justifyContent: 'center', height: 360, ...style }}>\n                <SVGPieChart\n                    style={{ flex: 1 }}\n                    outerRadius={'80%'}\n                    innerRadius={`${innerRadiusRatio * 100}%`}\n                    data={pieChartData}\n                    valueAccessor={({ item }) => item.value}\n                >\n                    <Labels/>\n                </SVGPieChart>\n                <View\n                    style={[styles.textContainer, { left: (chartWidth * (1 - innerRadiusRatio)) / 2, width: innerRadiusRatio * chartWidth }]}\n                    onLayout={() => {\n                        chartRef.current.measure((x, y, width, height) => {\n                            setChartWidth(width)\n                        })\n                    }}\n                >\n                    <RNText\n                        numberOfLines={2}\n                        style={styles.text}\n                        >\n                        { selectedSliceIndex !== null && data[selectedSliceIndex].key ?  data[selectedSliceIndex].key : '' }\n                    </RNText>\n                </View>\n            </View>\n        </TouchableWithoutFeedback>\n    )\n}\n\nconst styles = StyleSheet.create({\n    textContainer: {\n        position: 'absolute',\n        padding: 10\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: 16,\n        fontWeight: 'bold',\n        color: palette.gray_600,\n    }\n});"]}