{"version":3,"sources":["pie-chart.tsx"],"names":["React","ReactNative","require","View","Dimensions","Text","RNText","StyleSheet","PieChart","SVGPieChart","props","selectedSlice","setSelectedSlice","useState","label","value","colors","pieChartData","data","map","chartData","index","key","svg","fill","color","onClick","arc","outerRadius","padAngle","onPress","labelWidth","setLabelWidth","deviceWidth","get","width","total","reduce","a","b","Labels","slices","slice","pieCentroid","undefined","toFixed","styles","container","justifyContent","height","item","nativeEvent","layout","text","left","create","position","textAlign","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Dimensions, Text: RNText, StyleSheet } = ReactNative;\n// import { View, Dimensions, Text as RNText, StyleSheet } from 'react-native';\nimport { PieChart as SVGPieChart } from 'react-native-svg-charts'\nimport { Text } from 'react-native-svg'\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface PieChartProps {\n    data: Array<ChartData>\n}\n\nexport default function PieChart(props: PieChartProps) {\n\n    const [selectedSlice, setSelectedSlice] = React.useState({\n        label: '',\n        value: 0\n    })\n\n    const { label } = selectedSlice\n\n    const colors = ['#9EA8B7', '#7D6A80', '#74988C', '#3E5567', '#63819B']\n    const pieChartData = props.data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => setSelectedSlice({\n                    label: chartData.key,\n                    value: chartData.value\n                })\n            },\n            arc: {\n                outerRadius: selectedSlice.label === chartData.key ? '100%' : '80%',\n                padAngle: 0,\n            },\n            onPress: () => setSelectedSlice({\n                label: chartData.key,\n                value: chartData.value\n            })\n        }\n    })\n\n    const [labelWidth, setLabelWidth] = React.useState(0)\n    const deviceWidth = Dimensions.get('window').width\n\n    const total = props.data.map(chartData => chartData.value).reduce((a, b) => a + b, 0)\n\n    const Labels = ({ slices }) => {\n        return slices.map((slice, index) => {\n            const { pieCentroid, data } = slice;\n            return (\n                <Text\n                    key={index}\n                    x={pieCentroid[0]}\n                    y={pieCentroid[1]}\n                    fill={'#FFFFFF'}\n                    fontWeight={ selectedSlice.label === data.key ? \"bold\" : undefined}\n                    textAnchor={'middle'}\n                    alignmentBaseline={'middle'}\n                    fontSize={14}\n                >\n                    {(data.value / total * 100).toFixed(2) + '%'}\n                </Text>\n            )\n        })\n    }\n\n    return (\n        <View style={styles.container}>\n        <View style={{ justifyContent: 'center' }}>\n            <SVGPieChart\n                style={{ height: 400 }}\n                outerRadius={'80%'}\n                innerRadius={'40%'}\n                data={pieChartData}\n                valueAccessor={({ item }) => item.value}\n            >\n                <Labels/>\n            </SVGPieChart>\n            <RNText\n                onLayout={({ nativeEvent: { layout: { width } } }) => {\n                    setLabelWidth(width)\n                }}\n                style={[styles.text, { left: deviceWidth / 2 - labelWidth / 2 }]}>\n                { selectedSlice && label }\n            </RNText>\n        </View>\n      </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      width: '100%',\n      height: '100%',\n    },\n    text: {\n        position: 'absolute',\n        textAlign: 'center',\n        fontWeight: 'bold',\n        fontSize: 30,\n        color: '#262C33'\n    }\n});"]}