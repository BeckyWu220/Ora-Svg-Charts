{"version":3,"sources":["pie-chart.tsx"],"names":["React","ReactNative","require","View","Text","RNText","StyleSheet","TouchableWithoutFeedback","PieChart","SVGPieChart","palette","getRandomColor","props","colors","setColors","useState","data","style","instructionText","selectedSliceIndex","setSelectedSliceIndex","useEffect","onSelect","preferredColors","blue_700","purple_100","green_100","blue_600","gray_200","green_200","purple_200","gray_700","numberOfColorsToGenerate","length","generatedColors","i","randomColor","includes","push","concat","pieChartData","map","chartData","index","key","value","svg","fill","color","onClick","arc","outerRadius","padAngle","onPress","chartWidth","setChartWidth","offsetX","useRef","Labels","slices","slice","pieCentroid","white","toFixed","chartRef","innerRadiusRatio","justifyContent","height","flex","item","styles","textContainer","left","current","width","measure","x","y","text","create","position","padding","alignItems","textAlign","fontSize","fontWeight","fontFamily","gray_600"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Text: RNText, StyleSheet, TouchableWithoutFeedback } = ReactNative;\n// import { View, Dimensions, Text as RNText, StyleSheet } from 'react-native';\nimport { PieChart as SVGPieChart } from 'react-native-svg-charts';\nimport { isTablet } from 'react-native-device-detection';\nimport { Text } from 'react-native-svg';\nimport { palette, getRandomColor } from './colors';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface PieChartProps {\n    data: Array<ChartData>,\n    onSelect?(data?: ChartData): any,\n    style: object,\n    instructionText?: string\n}\n\nexport default function PieChart(props: PieChartProps) {\n\n    const [ colors, setColors ] = React.useState([])\n\n    const { data, style, instructionText = '' } = props\n\n    const [selectedSliceIndex, setSelectedSliceIndex] = React.useState(null)\n\n    React.useEffect(() => {\n        props.onSelect && props.onSelect(selectedSliceIndex)\n    }, [selectedSliceIndex])\n\n    const preferredColors = [palette.blue_700, palette.purple_100, palette.green_100, palette.blue_600, palette.gray_200, palette.green_200, palette.purple_200, palette.gray_700]\n    React.useEffect(() => {\n        const numberOfColorsToGenerate = data.length - preferredColors.length\n        const generatedColors = []\n        for (var i = 0; i < numberOfColorsToGenerate; i++) { \n            let randomColor = null\n            do {\n                randomColor = getRandomColor()\n            } while (preferredColors.includes(randomColor) || generatedColors.includes(randomColor))\n            generatedColors.push(randomColor)\n        }\n        setColors(preferredColors.concat(generatedColors))\n    }, [])\n    \n    const pieChartData = data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => {\n                    setSelectedSliceIndex(index)\n                }\n            },\n            arc: {\n                outerRadius: selectedSliceIndex === index ? '100%' : '80%',\n                padAngle: 0,\n            },\n            onPress: () => {\n                setSelectedSliceIndex(index)\n            }\n        }\n    })\n\n    const [chartWidth, setChartWidth] = React.useState(0)\n    const offsetX = React.useRef(0)\n\n    const Labels = ({ slices }) => {\n        return slices.map((slice, index) => {\n            const { pieCentroid, data } = slice;\n            return (\n                <Text\n                    key={index}\n                    x={pieCentroid[0]}\n                    y={pieCentroid[1]}\n                    fill={palette.white}\n                    fontWeight={ selectedSliceIndex === index ? \"bold\" : \"normal\"}\n                    textAnchor={'middle'}\n                    alignmentBaseline={'middle'}\n                    fontSize={16}\n                    fontFamily={\"SourceSansPro-Regular\"}\n                >\n                    {data.value.toFixed(1) + '%'}\n                </Text>\n            )\n        })\n    }\n\n    const chartRef = React.useRef()\n\n    const innerRadiusRatio = 0.42\n\n    return (\n        <TouchableWithoutFeedback onPress={() => {\n            setSelectedSliceIndex(null)\n        }}>\n            <View ref={chartRef} style={{ justifyContent: 'center',  height: 360, ...style }}>\n                <SVGPieChart\n                    style={{ flex: 1 }}  \n                    outerRadius={'95%'}\n                    innerRadius={`${innerRadiusRatio * 100}%`}\n                    data={pieChartData}\n                    valueAccessor={({ item }) => item.value}\n                >\n                    <Labels/>\n                </SVGPieChart>\n                \n                <View\n                    style={[styles.textContainer,{left: offsetX.current + (1-innerRadiusRatio) * chartWidth / 2 ,width: innerRadiusRatio * chartWidth}]}\n                    onLayout={() => {\n                        chartRef.current.measure((x, y, width, height) => {\n                            offsetX.current = (width - height) / 2\n                            setChartWidth(height)\n                        })\n                    }}\n                >\n                    <RNText\n                        numberOfLines={4}\n                        style={[styles.text, !(selectedSliceIndex !== null && data[selectedSliceIndex].key) ? styles.instructionText : null]}\n                        >\n                        { selectedSliceIndex !== null && data[selectedSliceIndex].key ?  data[selectedSliceIndex].key : instructionText }\n                    </RNText>\n                </View>\n                \n            </View>\n        </TouchableWithoutFeedback>\n    )\n}\n\nconst styles = StyleSheet.create({\n    textContainer: {\n        position: 'absolute',\n        padding: 10,\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: 18,\n        fontWeight: 'bold',\n        fontFamily: \"SourceSansPro-Regular\",\n        color: palette.gray_600\n    },\n    instructionText: {\n        fontSize: 16,\n        fontWeight: 'normal',\n        color: palette.gray_600\n    }\n});"]}