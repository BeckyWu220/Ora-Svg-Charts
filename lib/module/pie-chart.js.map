{"version":3,"sources":["pie-chart.tsx"],"names":["React","ReactNative","require","View","Dimensions","Text","RNText","StyleSheet","TouchableWithoutFeedback","PieChart","SVGPieChart","props","selectedSlice","setSelectedSlice","useState","key","value","useEffect","onSelect","colors","pieChartData","data","map","chartData","index","svg","fill","color","onClick","arc","outerRadius","padAngle","onPress","labelWidth","setLabelWidth","deviceWidth","get","width","total","reduce","a","b","Labels","slices","slice","pieCentroid","toFixed","styles","container","justifyContent","height","item","nativeEvent","layout","text","left","create","position","textAlign","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Dimensions, Text: RNText, StyleSheet, TouchableWithoutFeedback } = ReactNative;\n// import { View, Dimensions, Text as RNText, StyleSheet } from 'react-native';\nimport { PieChart as SVGPieChart } from 'react-native-svg-charts'\nimport { Text } from 'react-native-svg'\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface PieChartProps {\n    data: Array<ChartData>,\n    onSelect?(data?: ChartData): any,\n}\n\nexport default function PieChart(props: PieChartProps) {\n\n    const [selectedSlice, setSelectedSlice] = React.useState<ChartData>({\n        key: null,\n        value: null\n    })\n\n    React.useEffect(() => {\n        props.onSelect && props.onSelect(selectedSlice)\n    }, [selectedSlice])\n\n    const colors = ['#9EA8B7', '#7D6A80', '#74988C', '#3E5567', '#63819B']\n    const pieChartData = props.data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => setSelectedSlice(chartData)\n            },\n            arc: {\n                outerRadius: selectedSlice && selectedSlice.key === chartData.key ? '100%' : '80%',\n                padAngle: 0,\n            },\n            onPress: () => setSelectedSlice(chartData)\n        }\n    })\n\n    const [labelWidth, setLabelWidth] = React.useState(0)\n    const deviceWidth = Dimensions.get('window').width\n\n    const total = props.data.map(chartData => chartData.value).reduce((a, b) => a + b, 0)\n\n    const Labels = ({ slices }) => {\n        return slices.map((slice, index) => {\n            const { pieCentroid, data } = slice;\n            return (\n                <Text\n                    key={index}\n                    x={pieCentroid[0]}\n                    y={pieCentroid[1]}\n                    fill={'#FFFFFF'}\n                    fontWeight={ selectedSlice && selectedSlice.key === data.key ? \"bold\" : \"normal\"}\n                    textAnchor={'middle'}\n                    alignmentBaseline={'middle'}\n                    fontSize={14}\n                >\n                    {(data.value / total * 100).toFixed(2) + '%'}\n                </Text>\n            )\n        })\n    }\n\n    return (\n        <TouchableWithoutFeedback style={styles.container} onPress={() => setSelectedSlice(null)}>\n            <View style={{ justifyContent: 'center' }}>\n                <SVGPieChart\n                    style={{ height: 400 }}\n                    outerRadius={'80%'}\n                    innerRadius={'40%'}\n                    data={pieChartData}\n                    valueAccessor={({ item }) => item.value}\n                >\n                    <Labels/>\n                </SVGPieChart>\n                <RNText\n                    onLayout={({ nativeEvent: { layout: { width } } }) => {\n                        setLabelWidth(width)\n                    }}\n                    style={[styles.text, { left: deviceWidth / 2 - labelWidth / 2 }]}>\n                    { selectedSlice && selectedSlice.key ? selectedSlice.key : '' }\n                </RNText>\n            </View>\n        </TouchableWithoutFeedback>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    text: {\n        position: 'absolute',\n        textAlign: 'center',\n        fontWeight: 'bold',\n        fontSize: 30,\n        color: '#262C33'\n    }\n});"]}