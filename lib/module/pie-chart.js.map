{"version":3,"sources":["pie-chart.tsx"],"names":["React","ReactNative","require","View","Text","RNText","StyleSheet","TouchableWithoutFeedback","PieChart","SVGPieChart","palette","props","data","style","selectedSlice","setSelectedSlice","useState","key","value","useEffect","onSelect","colors","blue_150","purple_100","green_100","blue_600","gray_200","pieChartData","map","chartData","index","svg","fill","color","onClick","arc","outerRadius","padAngle","onPress","chartWidth","setChartWidth","total","reduce","a","b","Labels","slices","slice","pieCentroid","white","toFixed","chartRef","useRef","innerRadiusRatio","justifyContent","height","flex","item","styles","textContainer","left","width","current","measure","x","y","text","create","position","padding","textAlign","fontSize","fontWeight","gray_600"],"mappings":"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","sourcesContent":["import React from 'react';\nconst ReactNative = require('react-native');\nconst { View, Text: RNText, StyleSheet, TouchableWithoutFeedback } = ReactNative;\n// import { View, Dimensions, Text as RNText, StyleSheet } from 'react-native';\nimport { PieChart as SVGPieChart } from 'react-native-svg-charts';\nimport { Text } from 'react-native-svg';\nimport { palette } from './colors';\n\ninterface ChartData {\n    key: string,\n    value: number,\n    color?: string\n}\n\nexport interface PieChartProps {\n    data: Array<ChartData>,\n    onSelect?(data?: ChartData): any,\n    style: object,\n}\n\nexport default function PieChart(props: PieChartProps) {\n\n    const { data, style } = props\n\n    const [selectedSlice, setSelectedSlice] = React.useState<ChartData>({\n        key: null,\n        value: null\n    })\n\n    React.useEffect(() => {\n        props.onSelect && props.onSelect(selectedSlice)\n    }, [selectedSlice])\n\n    const colors = [palette.blue_150, palette.purple_100, palette.green_100, palette.blue_600, palette.gray_200]\n    const pieChartData = data.map((chartData, index) => {\n        return {\n            key: chartData.key,\n            value: chartData.value,\n            svg: {\n                fill: chartData.color || colors[index],\n                onClick: () => setSelectedSlice(chartData)\n            },\n            arc: {\n                outerRadius: selectedSlice && selectedSlice.key === chartData.key ? '100%' : '80%',\n                padAngle: 0,\n            },\n            onPress: () => setSelectedSlice(chartData)\n        }\n    })\n\n    const [chartWidth, setChartWidth] = React.useState(0)\n\n    const total = data.map(chartData => chartData.value).reduce((a, b) => a + b, 0)\n\n    const Labels = ({ slices }) => {\n        return slices.map((slice, index) => {\n            const { pieCentroid, data } = slice;\n            return (\n                <Text\n                    key={index}\n                    x={pieCentroid[0]}\n                    y={pieCentroid[1]}\n                    fill={palette.white}\n                    fontWeight={ selectedSlice && selectedSlice.key === data.key ? \"bold\" : \"normal\"}\n                    textAnchor={'middle'}\n                    alignmentBaseline={'middle'}\n                    fontSize={14}\n                >\n                    {(data.value / total * 100).toFixed(1) + '%'}\n                </Text>\n            )\n        })\n    }\n\n    const chartRef = React.useRef()\n\n    const innerRadiusRatio = 0.35\n\n    return (\n        <TouchableWithoutFeedback onPress={() => setSelectedSlice(null)}>\n            <View ref={chartRef} style={{ justifyContent: 'center', height: 360, ...style }}>\n                <SVGPieChart\n                    style={{ flex: 1 }}\n                    outerRadius={'80%'}\n                    innerRadius={`${innerRadiusRatio * 100}%`}\n                    data={pieChartData}\n                    valueAccessor={({ item }) => item.value}\n                >\n                    <Labels/>\n                </SVGPieChart>\n                <View\n                    style={[styles.textContainer, { left: (chartWidth * (1 - innerRadiusRatio)) / 2, width: innerRadiusRatio * chartWidth }]}\n                    onLayout={() => {\n                        chartRef.current.measure((x, y, width, height) => {\n                            setChartWidth(width)\n                        })\n                    }}\n                >\n                    <RNText\n                        numberOfLines={2}\n                        style={styles.text}\n                        >\n                        { selectedSlice && selectedSlice.key ? selectedSlice.key : '' }\n                    </RNText>\n                </View>\n            </View>\n        </TouchableWithoutFeedback>\n    )\n}\n\nconst styles = StyleSheet.create({\n    textContainer: {\n        position: 'absolute',\n        padding: 10\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: 16,\n        fontWeight: 'bold',\n        color: palette.gray_600,\n    }\n});"]}